This patch just makes the git-hg script runnable on a wider variety of installations. Some of the scenarios where I work don't have Bash installed by default. Others don't have greadlink but do accept a `-f` but not a `--canonicalize` argument to readlink.

Additionally, we make error output more consistent (always use capital "ERROR", always to stderr).


diff -Naurp orig/git-hg first/git-hg
--- orig/git-hg	2012-07-01 00:23:03.168806817 -0400
+++ first/git-hg	2012-07-01 00:23:03.155805793 -0400
@@ -1,6 +1,7 @@
-#!/usr/bin/env bash
+#!/bin/sh
 
-if which python2 >&/dev/null; then
+
+if which python2 >/dev/null 2>&1; then
     PYTHON=python2
     export PYTHON
 fi
@@ -9,18 +10,23 @@ set -e
 
 # Try to use GNU Coreutils readlink --canonicalize if available,
 # falling back to less robust shell script only if not found.
-if which greadlink >&/dev/null; then
+if which greadlink >/dev/null 2>&1; then
     canon="greadlink --canonicalize"
-elif readlink --canonicalize / >&/dev/null; then
-    canon="readlink --canonicalize"
+elif readlink -f / >/dev/null 2>&1; then
+    canon="readlink -f"
+elif which realpath >/dev/null 2>&1; then
+    canon="realpath"
 else
     canon=canonicalize
 fi
 
-function canonicalize {
+# shell implementation of `readlink -f $1`
+# changes current directory
+canonicalize () {
+    local path dir file
     path="$1"
     
-    while [[ -L "$path" ]]; do
+    while [ -L "$path" ]; do
         dir=$(dirname "$path")
         path=$(ls -l "$path" | sed -e 's/.* -> //')
         cd "$dir"
@@ -28,53 +34,54 @@ function canonicalize {
     
     dir=$(dirname "$path")
     file=$(basename "$path")
-    if [[ ! -d "$dir" ]]; then
-        echo "canonize: $dir: No such directory" >&2
+    if [ ! -d "$dir" ]; then
+        echo "canonicalize: $dir: No such directory" >&2
         exit 1
     fi
-    cdir=$(cd "$dir" && pwd -P)
-    printf "%s/%s\n" "$cdir" "$file"
+    dir=$(cd "$dir" && pwd -P)
+    printf "%s/%s\n" "$dir" "$file"
 }
 
-function git-current-branch {
+git-current-branch () {
     local ref
     ref=$(git symbolic-ref -q HEAD) && echo "${ref#refs/heads/}"
 }
 
-function check-hg-fast-export {
+check-hg-fast-export () {
+    local home
     # Search for hg-fast-export $PATH, use if available, if not fall back
-    # to looking around for it in sibling directory of bin directory of
-    # the current exeuctable, possibly tracing back along symbolic link.
-    if type hg-fast-export > /dev/null 2>&1 ; then
+    # to looking around for it relative to the current executable's realpath.
+    if type hg-fast-export >/dev/null 2>&1; then
         HG_FAST_EXPORT=hg-fast-export
     else
-        GITHG_HOME=$($canon "$(dirname "$($canon "$0")")/..")
-        HG_FAST_EXPORT=$GITHG_HOME/fast-export/hg-fast-export.sh
-        if ! type "$HG_FAST_EXPORT" > /dev/null 2>&1 ; then
-            echo "error: executable not found, $HG_FAST_EXPORT"
-            echo 'Possible fixes: run "git submodule update --init" in git-hg repo, or'
-            echo 'install hg-fast-export executable in directory on $PATH.'
+        home=$(dirname "$($canon "$0")")
+        home=$($canon "$home/../fast-export")
+        HG_FAST_EXPORT=$home/hg-fast-export.sh
+        if ! type "$HG_FAST_EXPORT" >/dev/null 2>&1; then
+            echo "ERROR: executable not found, $HG_FAST_EXPORT" >&2
+            echo 'Possible fixes: run "git submodule update --init" in git-hg repo, or' >&2
+            echo 'install hg-fast-export executable in directory on $PATH.' >&2
             exit 1
         fi
     fi
 }
 
-function git-hg-clone {
+git-hg-clone () {
     check-hg-fast-export
     
-    if [[ $1 == "--force" ]]; then
+    if [ "--force" = "$1" ]; then
         FORCE="--force"
         shift
     fi
     HG_REMOTE=$1
     
-    if [[ $# -lt 2 ]]; then
+    if [ $# -lt 2 ]; then
         CHECKOUT=$(basename "${1%#*}")
     else
         CHECKOUT=$2
     fi
-    if [[ -a $CHECKOUT ]]; then
-        echo "error: $CHECKOUT exists"
+    if [ -e "$CHECKOUT" ]; then
+        echo "ERROR: $CHECKOUT exists" >&2
         exit 1
     fi
     git init "$CHECKOUT"
@@ -88,7 +95,7 @@ function git-hg-clone {
         )
         git remote add hg .git/hgremote
         git fetch hg
-        if git rev-parse --verify -q remotes/hg/master > /dev/null; then
+        if git rev-parse --verify -q remotes/hg/master >/dev/null; then
             local branch="master"
         else
             local branch=$(cd .git/hgcheckout/ && hg tip | grep branch | awk '{print $2}')
@@ -98,9 +105,9 @@ function git-hg-clone {
     )
 }
 
-function git-hg-fetch {
+git-hg-fetch () {
     check-hg-fast-export
-    if [[ $1 == "--force" ]]; then
+    if [ "--force" = "$1" ]; then
         FORCE="--force"
         shift
     fi
@@ -112,8 +119,8 @@ function git-hg-fetch {
     git fetch hg
 }
 
-function git-hg-pull {
-    while [[ $# -gt 0 ]]; do
+git-hg-pull () {
+    while [ $# -gt 0 ]; do
         case "$1" in
         --rebase)
             REBASE="--rebase"
@@ -130,40 +137,40 @@ function git-hg-pull {
     local current_branch remote_branch
 
     if ! current_branch=$(git-current-branch); then
-            echo "ERROR: You are not currently on a branch."
+            echo "ERROR: You are not currently on a branch." >&2
             exit 1
     fi
 
-    if [[ $current_branch == "master" ]]; then
+    if [ "master" = "$current_branch" ]; then
         remote_branch=$(git config hg.tracking.master || true)
         
-        if [[ -z $remote_branch ]]; then
-            if git rev-parse --verify -q remotes/hg/master > /dev/null; then
+        if [ -z "$remote_branch" ]; then
+            if git rev-parse --verify -q remotes/hg/master >/dev/null; then
                 remote_branch="master"
                 git config hg.tracking.master master
             else
-                echo "ERROR: Cannot determine remote branch. There is no remote branch called master, and hg.tracking.master not set. Merge the desired branch manually."
+                echo "ERROR: Cannot determine remote branch. There is no remote branch called master, and hg.tracking.master not set. Merge the desired branch manually." >&2
                 exit 1
             fi
         fi
     else
         remote_branch=$(git config "hg.tracking.$current_branch" || true)
-        if [[ -z $remote_branch ]]; then
-             echo "ERROR: Cannot determine the remote branch to pull from. Run git merge manually against the desired remote branch."
-             echo "Alternatively, set hg.tracking.$current_branch to the name of the branch in hg the current branch should track"
+        if [ -z "$remote_branch" ]; then
+             echo "ERROR: Cannot determine the remote branch to pull from. Run git merge manually against the desired remote branch." >&2
+             echo "Alternatively, set hg.tracking.$current_branch to the name of the branch in hg the current branch should track." >&2
              exit 1
         fi
     fi
 
-    if [[ "$REBASE" == "--rebase" ]]; then
+    if [ "--rebase" = "$REBASE" ]; then
         git rebase "hg/$remote_branch"
     else
         git merge "hg/$remote_branch"
     fi
 }
 
-function git-hg-checkout {
-    if [[ $1 == "--force" ]]; then
+git-hg-checkout () {
+    if [ "--force" = "$1" ]; then
         FORCE="--force"
         shift
     fi
@@ -171,18 +178,18 @@ function git-hg-checkout {
     git checkout "hg/$1" -b "$1"
 }
 
-function git-hg-push {
+git-hg-push () {
     HG_REPO=$1
     hg --config extensions.convert= convert . .git/hgcheckout
     hg -R .git/hgcheckout push "$HG_REPO"
 }
 
-function usage {
+usage () {
     echo "To clone a mercurial repo run:"
     echo "  clone <path/to/mercurial/repo> [local_checkout_path]"
     echo ""
     echo " if that fails (due to unnamed heads) try:"
-    echo "  git-hg clone --force <path/to/mercurial/repo> [local_checkout_path]"
+    echo "  clone --force <path/to/mercurial/repo> [local_checkout_path]"
     echo ""
     echo "To work with a cloned mercurial repo use: "
     echo "  fetch [ --force ]                   fetch latest branches from mercurial"
